import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv1D, Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
import requests


url = "https://github.com/kdemertzis/EKPA/raw/main/Data/pcap_data.csv"
data = pd.read_csv(url)


print(data.head())

X = data.drop('label', axis=1).values  # Υποθέτουμε ότι η στήλη 'label' είναι ο στόχος
y = data['label'].values


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)


model = Sequential()


model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)))
model.add(Flatten())  # Για να γίνει flat η έξοδος από το Conv1D layer


model.add(Dense(64, activation='relu'))


model.add(Dense(1, activation='sigmoid'))  # Αν έχουμε δυαδική ταξινόμηση (κανονικό/επίθεση)


model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])


X_train = np.expand_dims(X_train, axis=2)  # Προσθήκη επιπλέον διάστασης για το Conv1D
X_test = np.expand_dims(X_test, axis=2)


early_stopping = EarlyStopping(monitor='val_loss', patience=5)
history = model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), callbacks=[early_stopping])


test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")


predictions = model.predict(X_test)


print(, predictions[:5])

